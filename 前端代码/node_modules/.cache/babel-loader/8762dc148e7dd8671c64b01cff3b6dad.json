{"remainingRequest":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/jeecg/JEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/jeecg/JEditor.vue","mtime":1596297340377},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport tinymce from 'tinymce/tinymce';\nimport Editor from '@tinymce/tinymce-vue';\nimport 'tinymce/themes/silver/theme';\nimport 'tinymce/plugins/image';\nimport 'tinymce/plugins/link';\nimport 'tinymce/plugins/media';\nimport 'tinymce/plugins/table';\nimport 'tinymce/plugins/lists';\nimport 'tinymce/plugins/contextmenu';\nimport 'tinymce/plugins/wordcount';\nimport 'tinymce/plugins/colorpicker';\nimport 'tinymce/plugins/textcolor';\nimport 'tinymce/plugins/fullscreen';\nimport 'tinymce/icons/default';\nimport { uploadAction, getFileAccessHttpUrl } from '@/api/manage';\nimport { getVmParentByName } from '@/utils/util';\nexport default {\n  components: {\n    Editor: Editor\n  },\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    triggerChange: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    plugins: {\n      type: [String, Array],\n      default: 'lists image link media table textcolor wordcount contextmenu fullscreen'\n    },\n    toolbar: {\n      type: [String, Array],\n      default: 'undo redo |  formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | lists link unlink image media table | removeformat | fullscreen',\n      branding: false\n    }\n  },\n  data: function data() {\n    return {\n      //初始化配置\n      init: {\n        language_url: '/tinymce/langs/zh_CN.js',\n        language: 'zh_CN',\n        skin_url: '/tinymce/skins/lightgray',\n        height: 300,\n        plugins: this.plugins,\n        toolbar: this.toolbar,\n        branding: false,\n        menubar: false,\n        toolbar_drawer: false,\n        images_upload_handler: function images_upload_handler(blobInfo, success) {\n          var formData = new FormData();\n          formData.append('file', blobInfo.blob(), blobInfo.filename());\n          formData.append('biz', \"jeditor\");\n          formData.append(\"jeditor\", \"1\");\n          uploadAction(window._CONFIG['domianURL'] + \"/sys/common/upload\", formData).then(function (res) {\n            if (res.success) {\n              if (res.message == 'local') {\n                var img = 'data:image/jpeg;base64,' + blobInfo.base64();\n                success(img);\n              } else {\n                var _img = getFileAccessHttpUrl(res.message);\n\n                success(_img);\n              }\n            }\n          });\n        }\n      },\n      myValue: this.value,\n      reloading: false\n    };\n  },\n  mounted: function mounted() {\n    this.initATabsChangeAutoReload();\n  },\n  methods: {\n    reload: function reload() {\n      var _this = this;\n\n      this.reloading = true;\n      this.$nextTick(function () {\n        return _this.reloading = false;\n      });\n    },\n    onClick: function onClick(e) {\n      this.$emit('onClick', e, tinymce);\n    },\n    //可以添加一些自己的自定义事件，如清空内容\n    clear: function clear() {\n      this.myValue = '';\n    },\n\n    /**\n     * 自动判断父级是否是 <a-tabs/> 组件，然后添加事件监听，自动触发reload()\n     *\n     * 由于 tabs 组件切换会导致 tinymce 无法输入，\n     * 只有重新加载才能使用（无论是vue版的还是jQuery版tinymce都有这个通病）\n     */\n    initATabsChangeAutoReload: function initATabsChangeAutoReload() {\n      var _this2 = this;\n\n      // 获取父级\n      var tabs = getVmParentByName(this, 'ATabs');\n      var tabPane = getVmParentByName(this, 'ATabPane');\n\n      if (tabs && tabPane) {\n        // 用户自定义的 key\n        var currentKey = tabPane.$vnode.key; // 添加事件监听\n\n        tabs.$on('change', function (key) {\n          // 切换到自己时执行reload\n          if (currentKey === key) {\n            _this2.reload();\n          }\n        });\n      }\n    }\n  },\n  watch: {\n    value: function value(newValue) {\n      this.myValue = newValue == null ? '' : newValue;\n    },\n    myValue: function myValue(newValue) {\n      if (this.triggerChange) {\n        this.$emit('change', newValue);\n      } else {\n        this.$emit('input', newValue);\n      }\n    }\n  }\n};",null]}