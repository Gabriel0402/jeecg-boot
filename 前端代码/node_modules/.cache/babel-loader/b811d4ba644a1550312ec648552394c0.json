{"remainingRequest":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/dict/JMultiSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/dict/JMultiSelectTag.vue","mtime":1591467542201},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ajaxGetDictItems, getDictItemsFromCache } from '@/api/api';\nexport default {\n  name: 'JMultiSelectTag',\n  props: {\n    dictCode: String,\n    placeholder: String,\n    disabled: Boolean,\n    value: String,\n    type: String,\n    options: Array\n  },\n  data: function data() {\n    return {\n      dictOptions: [],\n      tagType: \"\",\n      arrayValue: !this.value ? [] : this.value.split(\",\")\n    };\n  },\n  created: function created() {\n    if (!this.type || this.type === \"list_multi\") {\n      this.tagType = \"select\";\n    } else {\n      this.tagType = this.type;\n    } //获取字典数据\n    //this.initDictData();\n\n  },\n  watch: {\n    options: function options(val) {\n      this.setCurrentDictOptions(val);\n    },\n    dictCode: {\n      immediate: true,\n      handler: function handler() {\n        this.initDictData();\n      }\n    },\n    value: function value(val) {\n      if (!val) {\n        this.arrayValue = [];\n      } else {\n        this.arrayValue = this.value.split(\",\");\n      }\n    }\n  },\n  methods: {\n    initDictData: function initDictData() {\n      var _this = this;\n\n      if (this.options && this.options.length > 0) {\n        this.dictOptions = _toConsumableArray(this.options);\n      } else {\n        //优先从缓存中读取字典配置\n        if (getDictItemsFromCache(this.dictCode)) {\n          this.dictOptions = getDictItemsFromCache(this.dictCode);\n          return;\n        } //根据字典Code, 初始化字典数组\n\n\n        ajaxGetDictItems(this.dictCode, null).then(function (res) {\n          if (res.success) {\n            _this.dictOptions = res.result;\n          }\n        });\n      }\n    },\n    onChange: function onChange(selectedValue) {\n      this.$emit('change', selectedValue.join(\",\"));\n    },\n    setCurrentDictOptions: function setCurrentDictOptions(dictOptions) {\n      this.dictOptions = dictOptions;\n    },\n    getCurrentDictOptions: function getCurrentDictOptions() {\n      return this.dictOptions;\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",null]}