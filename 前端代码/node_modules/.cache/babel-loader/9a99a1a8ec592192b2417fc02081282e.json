{"remainingRequest":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyang/Documents/jeecg-boot/前端代码/src/views/system/modules/DeptRoleAuthModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/src/views/system/modules/DeptRoleAuthModal.vue","mtime":1596297340397},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { queryTreeListForDeptRole, queryDeptRolePermission, saveDeptRolePermission } from '@/api/api';\nimport RoleDataruleModal from './RoleDataruleModal.vue';\nimport DeptRoleDataruleModal from './DeptRoleDataruleModal';\nexport default {\n  name: \"DeptRoleAuthModal\",\n  components: {\n    DeptRoleDataruleModal: DeptRoleDataruleModal,\n    RoleDataruleModal: RoleDataruleModal\n  },\n  data: function data() {\n    return {\n      departId: \"\",\n      roleId: \"\",\n      treeData: [],\n      defaultCheckedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      expandedKeysss: [],\n      allTreeKeys: [],\n      autoExpandParent: true,\n      checkStrictly: true,\n      title: \"部门角色权限配置\",\n      visible: false,\n      loading: false,\n      selectedKeys: []\n    };\n  },\n  methods: {\n    switchCheckStrictly: function switchCheckStrictly(v) {\n      if (v == 1) {\n        this.checkStrictly = false;\n      } else if (v == 2) {\n        this.checkStrictly = true;\n      }\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(id) {\n      if (id && id.length > 0) {\n        this.selectedKeys = id;\n      }\n\n      this.$refs.datarule.show(this.selectedKeys[0], this.departId, this.roleId);\n    },\n    onCheck: function onCheck(o) {\n      if (this.checkStrictly) {\n        this.checkedKeys = o.checked;\n      } else {\n        this.checkedKeys = o;\n      }\n    },\n    show: function show(roleId, departId) {\n      this.departId = departId;\n      this.roleId = roleId;\n      this.visible = true;\n    },\n    close: function close() {\n      this.reset();\n      this.$emit('close');\n      this.visible = false;\n    },\n    onExpand: function onExpand(expandedKeys) {\n      this.expandedKeysss = expandedKeys;\n      this.autoExpandParent = false;\n    },\n    reset: function reset() {\n      this.expandedKeysss = [];\n      this.checkedKeys = [];\n      this.defaultCheckedKeys = [];\n      this.loading = false;\n    },\n    expandAll: function expandAll() {\n      this.expandedKeysss = this.allTreeKeys;\n    },\n    closeAll: function closeAll() {\n      this.expandedKeysss = [];\n    },\n    checkALL: function checkALL() {\n      this.checkedKeys = this.allTreeKeys;\n    },\n    cancelCheckALL: function cancelCheckALL() {\n      this.checkedKeys = [];\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    handleSubmit: function handleSubmit(exit) {\n      var _this = this;\n\n      var that = this;\n      var params = {\n        roleId: that.roleId,\n        permissionIds: that.checkedKeys.join(\",\"),\n        lastpermissionIds: that.defaultCheckedKeys.join(\",\")\n      };\n      that.loading = true;\n      console.log(\"请求参数：\", params);\n      saveDeptRolePermission(params).then(function (res) {\n        if (res.success) {\n          that.$message.success(res.message);\n          that.loading = false;\n\n          if (exit) {\n            that.close();\n          }\n        } else {\n          that.$message.error(res.message);\n          that.loading = false;\n\n          if (exit) {\n            that.close();\n          }\n        }\n\n        _this.loadData();\n      });\n    },\n    convertTreeListToKeyLeafPairs: function convertTreeListToKeyLeafPairs(treeList) {\n      var keyLeafPair = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      var _iterator = _createForOfIteratorHelper(treeList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n              key = _step$value.key,\n              isLeaf = _step$value.isLeaf,\n              children = _step$value.children;\n          keyLeafPair.push({\n            key: key,\n            isLeaf: isLeaf\n          });\n\n          if (children && children.length > 0) {\n            this.convertTreeListToKeyLeafPairs(children, keyLeafPair);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return keyLeafPair;\n    },\n    loadData: function loadData() {\n      var _this2 = this;\n\n      queryTreeListForDeptRole({\n        departId: this.departId\n      }).then(function (res) {\n        _this2.treeData = res.result.treeList;\n        _this2.allTreeKeys = res.result.ids;\n        queryDeptRolePermission({\n          roleId: _this2.roleId\n        }).then(function (res) {\n          _this2.checkedKeys = _toConsumableArray(res.result);\n          _this2.defaultCheckedKeys = _toConsumableArray(res.result);\n          _this2.expandedKeysss = _this2.allTreeKeys;\n        });\n      });\n    }\n  },\n  watch: {\n    visible: function visible() {\n      if (this.visible) {\n        this.loadData();\n      }\n    }\n  }\n};",null]}