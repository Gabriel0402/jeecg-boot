{"remainingRequest":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyang/Documents/jeecg-boot/前端代码/src/views/pipe/PipeInfoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/src/views/pipe/PipeInfoList.vue","mtime":1596297333612},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '@/assets/less/TableExpand.less';\nimport { mixinDevice } from '@/utils/mixin';\nimport { JeecgListMixin } from '@/mixins/JeecgListMixin';\nimport PipeInfoModal from './modules/PipeInfoModal';\nimport { ACCESS_TOKEN } from \"@/store/mutation-types\";\nimport { getAction } from '@/api/manage';\nimport Vue from 'vue';\nimport { filterObj } from '@/utils/util';\nimport { FormTypes, getRefPromise } from '@/utils/JEditableTableUtil';\nexport default {\n  name: \"PipeInfoList\",\n  mixins: [mixinDevice],\n  components: {\n    PipeInfoModal: PipeInfoModal\n  },\n  data: function data() {\n    return {\n      description: '节点信息管理页面',\n      // 表头\n      zoom: 18,\n      center: [119.953, 31.688],\n      lines: [],\n      markers: [],\n      url: {\n        list: \"/pipeinfo/pipeInfo/list\",\n        slist: '/pipeinfo/pipeInfo/querySensorLocInfoByMainId'\n      },\n      dictOptions: {},\n      // data related\n      superQueryParams: '',\n\n      /** 高级查询拼接方式 */\n      superQueryMatchType: 'and',\n      tokenHeader: {\n        'X-Access-Token': Vue.ls.get(ACCESS_TOKEN)\n      },\n\n      /* 查询条件-请不要在queryParam中声明非字符串值的属性 */\n      queryParam: {},\n\n      /* 数据源 */\n      dataSource: [],\n\n      /* 分页参数 */\n      ipagination: {\n        current: 1,\n        pageSize: 10,\n        pageSizeOptions: ['10', '20', '30'],\n        showTotal: function showTotal(total, range) {\n          return range[0] + \"-\" + range[1] + \" 共\" + total + \"条\";\n        },\n        showQuickJumper: true,\n        showSizeChanger: true,\n        total: 0\n      },\n      columns: [{\n        title: '#',\n        dataIndex: '',\n        key: 'rowIndex',\n        width: 60,\n        align: \"center\",\n        customRender: function customRender(t, r, index) {\n          return parseInt(index) + 1;\n        }\n      }, {\n        title: '管道设备ID',\n        align: \"center\",\n        dataIndex: 'pipeId'\n      }, {\n        title: '管道描述',\n        align: \"center\",\n        dataIndex: 'pipeDes'\n      }, {\n        title: '首纬度',\n        align: \"center\",\n        dataIndex: 'hlat'\n      }, {\n        title: '首经度',\n        align: \"center\",\n        dataIndex: 'hlong'\n      }, {\n        title: '尾纬度',\n        align: \"center\",\n        dataIndex: 'rlat'\n      }, {\n        title: '尾经度',\n        align: \"center\",\n        dataIndex: 'rlong'\n      }, {\n        title: '操作',\n        dataIndex: 'action',\n        align: \"center\",\n        scopedSlots: {\n          customRender: 'action'\n        }\n      }],\n      sensorLocInfoTable: {\n        loading: false,\n        dataSource: [],\n        columns: [{\n          title: '设备号',\n          key: 'uid',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '创建人',\n          key: 'createBy',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '纬度',\n          key: 'latitude',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '经度',\n          key: 'longitude',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, // {\n        //   title: '所属管道',\n        //   key: 'pipeId',\n        //   type: FormTypes.input,\n        //   width:\"200px\",\n        //   placeholder: '请输入${title}',\n        //   defaultValue: '',\n        // },\n        {\n          title: '节点描述',\n          key: 'desp',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }]\n      }\n    };\n  },\n  computed: {\n    importExcelUrl: function importExcelUrl() {\n      return \"\".concat(window._CONFIG['domianURL'], \"/\").concat(this.url.importExcelUrl);\n    }\n  },\n  created: function created() {\n    this.loadData();\n  },\n  methods: {\n    loadData: function loadData(arg) {\n      var _this = this;\n\n      if (!this.url.list) {\n        this.$message.error(\"请设置url.list属性!\");\n        return;\n      } //加载数据 若传入参数1则加载第一页的内容\n\n\n      if (arg === 1) {\n        this.ipagination.current = 1;\n      }\n\n      var params = this.getQueryParams();\n      this.loading = true;\n      getAction(this.url.list, params).then(function (res) {\n        if (res.success) {\n          _this.dataSource = res.result.records;\n\n          var ids = _this.dataSource.map(function (item) {\n            return item.id;\n          }); // this.markers= \n\n\n          _this.lines = _this.dataSource.map(function (item) {\n            return [[item.hlong, item.hlat], [item.rlong, item.rlat]];\n          });\n\n          var _iterator = _createForOfIteratorHelper(ids),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var id = _step.value;\n              var _params = {\n                id: id\n              };\n              getAction(_this.url.slist, _params).then(function (res) {\n                var result = res.result;\n                var dataSource = [];\n\n                if (result) {\n                  if (Array.isArray(result)) {\n                    dataSource = result;\n                  } else if (Array.isArray(result.records)) {\n                    dataSource = result.records;\n                  }\n                }\n\n                dataSource.forEach(function (item) {\n                  var marker = {\n                    position: [item.longitude, item.latitude],\n                    id: item.id\n                  };\n\n                  _this.markers.push(marker);\n                });\n              });\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          _this.ipagination.total = res.result.total;\n        }\n\n        if (res.code === 510) {\n          _this.$message.warning(res.message);\n        }\n\n        _this.loading = false;\n      });\n    },\n    getQueryParams: function getQueryParams() {\n      //获取查询条件\n      var sqp = {};\n\n      if (this.superQueryParams) {\n        sqp['superQueryParams'] = encodeURI(this.superQueryParams);\n        sqp['superQueryMatchType'] = this.superQueryMatchType;\n      }\n\n      var param = Object.assign(sqp, this.queryParam, this.isorter, this.filters);\n      param.field = this.getQueryField();\n      param.pageNo = this.ipagination.current;\n      param.pageSize = this.ipagination.pageSize;\n      return filterObj(param);\n    },\n    getQueryField: function getQueryField() {\n      //TODO 字段权限控制\n      var str = \"id,\";\n      this.columns.forEach(function (value) {\n        str += \",\" + value.dataIndex;\n      });\n      return str;\n    }\n  }\n};",null]}