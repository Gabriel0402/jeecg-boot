{"remainingRequest":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/jeecg/JTreeDict.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/jeecg/JTreeDict.vue","mtime":1596297340379},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeDict',\n  data: function data() {\n    return {\n      treeData: [],\n      treeValue: null,\n      url_root: \"/sys/category/loadTreeRoot\",\n      url_children: \"/sys/category/loadTreeChildren\",\n      url_view: '/sys/category/loadOne'\n    };\n  },\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    parentCode: {\n      type: String,\n      default: '',\n      required: false\n    },\n    field: {\n      type: String,\n      default: 'id',\n      required: false\n    },\n    root: {\n      type: Object,\n      required: false,\n      default: function _default() {\n        return {\n          pid: '0'\n        };\n      }\n    },\n    async: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  watch: {\n    root: {\n      handler: function handler(val) {\n        console.log(\"root-change\", val);\n      },\n      deep: true\n    },\n    parentCode: {\n      handler: function handler() {\n        this.loadRoot();\n      }\n    },\n    value: {\n      handler: function handler() {\n        this.loadViewInfo();\n      }\n    }\n  },\n  created: function created() {\n    this.loadRoot();\n    this.loadViewInfo();\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  methods: {\n    loadViewInfo: function loadViewInfo() {\n      var _this = this;\n\n      if (!this.value || this.value == \"0\") {\n        this.treeValue = null;\n      } else {\n        var param = {\n          field: this.field,\n          val: this.value\n        };\n        getAction(this.url_view, param).then(function (res) {\n          if (res.success) {\n            _this.treeValue = {\n              value: _this.value,\n              label: res.result.name\n            };\n          }\n        });\n      }\n    },\n    loadRoot: function loadRoot() {\n      var _this2 = this;\n\n      var param = {\n        async: this.async,\n        pcode: this.parentCode\n      };\n      getAction(this.url_root, param).then(function (res) {\n        if (res.success) {\n          _this2.handleTreeNodeValue(res.result);\n\n          _this2.treeData = _toConsumableArray(res.result);\n        } else {\n          _this2.$message.error(res.message);\n        }\n      });\n    },\n    asyncLoadTreeData: function asyncLoadTreeData(treeNode) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        if (!_this3.async) {\n          resolve();\n          return;\n        }\n\n        if (treeNode.$vnode.children) {\n          resolve();\n          return;\n        }\n\n        var pid = treeNode.$vnode.key;\n        var param = {\n          pid: pid\n        };\n        getAction(_this3.url_children, param).then(function (res) {\n          if (res.success) {\n            _this3.handleTreeNodeValue(res.result);\n\n            _this3.addChildren(pid, res.result, _this3.treeData);\n\n            _this3.treeData = _toConsumableArray(_this3.treeData);\n          }\n\n          resolve();\n        });\n      });\n    },\n    addChildren: function addChildren(pid, children, treeArray) {\n      if (treeArray && treeArray.length > 0) {\n        var _iterator = _createForOfIteratorHelper(treeArray),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n\n            if (item.key == pid) {\n              if (!children || children.length == 0) {\n                item.leaf = true;\n              } else {\n                item.children = children;\n              }\n\n              break;\n            } else {\n              this.addChildren(pid, children, item.children);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    },\n    handleTreeNodeValue: function handleTreeNodeValue(result) {\n      var storeField = this.field == 'code' ? 'code' : 'key';\n\n      var _iterator2 = _createForOfIteratorHelper(result),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var i = _step2.value;\n          i.value = i[storeField];\n          i.isLeaf = !i.leaf ? false : true;\n\n          if (i.children && i.children.length > 0) {\n            this.handleTreeNodeValue(i.children);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    },\n    onChange: function onChange(value) {\n      console.log(value);\n\n      if (!value) {\n        this.$emit('change', '');\n      } else {\n        this.$emit('change', value.value);\n      }\n\n      this.treeValue = value;\n    },\n    onSearch: function onSearch(value) {\n      console.log(value);\n    },\n    getCurrTreeData: function getCurrTreeData() {\n      return this.treeData;\n    }\n  }\n};",null]}