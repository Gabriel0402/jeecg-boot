{"remainingRequest":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/layouts/TabLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/layouts/TabLayout.vue","mtime":1596297340808},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport GlobalLayout from '@/components/page/GlobalLayout';\nimport Contextmenu from '@/components/menu/Contextmenu';\nimport { mixin, mixinDevice } from '@/utils/mixin.js';\nimport { triggerWindowResizeEvent } from '@/utils/util';\nvar indexKey = '/dashboard/analysis';\nexport default {\n  name: 'TabLayout',\n  components: {\n    GlobalLayout: GlobalLayout,\n    Contextmenu: Contextmenu\n  },\n  mixins: [mixin, mixinDevice],\n  data: function data() {\n    return {\n      pageList: [],\n      linkList: [],\n      activePage: '',\n      menuVisible: false,\n      menuItemList: [{\n        key: '4',\n        icon: 'reload',\n        text: '刷 新'\n      }, {\n        key: '1',\n        icon: 'arrow-left',\n        text: '关闭左侧'\n      }, {\n        key: '2',\n        icon: 'arrow-right',\n        text: '关闭右侧'\n      }, {\n        key: '3',\n        icon: 'close',\n        text: '关闭其它'\n      }],\n      reloadFlag: true\n    };\n  },\n\n  /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用 ->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n  provide: function provide() {\n    return {\n      closeCurrent: this.closeCurrent\n    };\n  },\n\n  /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n  computed: {\n    multipage: function multipage() {\n      //判断如果是手机模式，自动切换为单页面模式\n      if (this.isMobile()) {\n        return false;\n      } else {\n        return this.$store.state.app.multipage;\n      }\n    }\n  },\n  created: function created() {\n    if (this.$route.path != indexKey) {\n      this.addIndexToFirst();\n    } // 复制一个route对象出来，不能影响原route\n\n\n    var currentRoute = Object.assign({}, this.$route);\n    currentRoute.meta = Object.assign({}, currentRoute.meta); // update-begin-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\n\n    var storeKey = 'route:title:' + currentRoute.fullPath;\n    var routeTitle = this.$ls.get(storeKey);\n\n    if (routeTitle) {\n      currentRoute.meta.title = routeTitle;\n    } // update-end-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\n\n\n    this.pageList.push(currentRoute);\n    this.linkList.push(currentRoute.fullPath);\n    this.activePage = currentRoute.fullPath;\n  },\n  mounted: function mounted() {},\n  watch: {\n    '$route': function $route(newRoute) {\n      //console.log(\"新的路由\",newRoute)\n      this.activePage = newRoute.fullPath;\n\n      if (!this.multipage) {\n        this.linkList = [newRoute.fullPath];\n        this.pageList = [Object.assign({}, newRoute)]; // update-begin-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n      } else if (indexKey == newRoute.fullPath) {\n        //首页时 判断是否缓存 没有缓存 刷新之\n        if (newRoute.meta.keepAlive === false) {\n          this.routeReload();\n        } // update-end-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n\n      } else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n        this.linkList.push(newRoute.fullPath);\n        this.pageList.push(Object.assign({}, newRoute)); // update-begin-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍\n\n        if (newRoute.meta.keepAlive) {\n          this.routeReload();\n        } // update-end-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍\n\n      } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n        var oldIndex = this.linkList.indexOf(newRoute.fullPath);\n        var oldPositionRoute = this.pageList[oldIndex];\n        this.pageList.splice(oldIndex, 1, Object.assign({}, newRoute, {\n          meta: oldPositionRoute.meta\n        }));\n      }\n    },\n    'activePage': function activePage(key) {\n      var index = this.linkList.lastIndexOf(key);\n      var waitRouter = this.pageList[index]; // 【TESTA-523】修复：不允许重复跳转路由异常\n\n      if (waitRouter.fullPath !== this.$route.fullPath) {\n        this.$router.push(Object.assign({}, waitRouter));\n        this.changeTitle(waitRouter.meta.title);\n      }\n    },\n    'multipage': function multipage(newVal) {\n      if (this.reloadFlag) {\n        if (!newVal) {\n          this.linkList = [this.$route.fullPath];\n          this.pageList = [this.$route];\n        }\n      }\n    },\n    // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    device: function device() {\n      if (this.multipage && this.linkList.indexOf(indexKey) === -1) {\n        this.addIndexToFirst();\n      }\n    } // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n\n  },\n  methods: {\n    // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    // 将首页添加到第一位\n    addIndexToFirst: function addIndexToFirst() {\n      this.pageList.splice(0, 0, {\n        name: 'dashboard-analysis',\n        path: indexKey,\n        fullPath: indexKey,\n        meta: {\n          icon: 'dashboard',\n          title: '首页'\n        }\n      });\n      this.linkList.splice(0, 0, indexKey);\n    },\n    // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    // update-begin-author:sunjianlei date:20200120 for: 动态更改页面标题\n    changeTitle: function changeTitle(title) {\n      var projectTitle = \"智能管道探漏系统\"; // 首页特殊处理\n\n      if (this.$route.path === indexKey) {\n        document.title = projectTitle;\n      } else {\n        document.title = title + ' · ' + projectTitle;\n      }\n    },\n    // update-end-author:sunjianlei date:20200120 for: 动态更改页面标题\n    changePage: function changePage(key) {\n      this.activePage = key;\n    },\n    tabCallBack: function tabCallBack() {\n      this.$nextTick(function () {\n        triggerWindowResizeEvent();\n      });\n    },\n    editPage: function editPage(key, action) {\n      this[action](key);\n    },\n    remove: function remove(key) {\n      if (key == indexKey) {\n        this.$message.warning('首页不能关闭!');\n        return;\n      }\n\n      if (this.pageList.length === 1) {\n        this.$message.warning('这是最后一页，不能再关闭了啦');\n        return;\n      }\n\n      console.log(\"this.pageList \", this.pageList);\n      this.pageList = this.pageList.filter(function (item) {\n        return item.fullPath !== key;\n      });\n      var index = this.linkList.indexOf(key);\n      this.linkList = this.linkList.filter(function (item) {\n        return item !== key;\n      });\n      index = index >= this.linkList.length ? this.linkList.length - 1 : index;\n      this.activePage = this.linkList[index];\n    },\n    onContextmenu: function onContextmenu(e) {\n      var pagekey = this.getPageKey(e.target);\n\n      if (pagekey !== null) {\n        e.preventDefault();\n        this.menuVisible = true;\n      }\n    },\n    getPageKey: function getPageKey(target, depth) {\n      depth = depth || 0;\n\n      if (depth > 2) {\n        return null;\n      }\n\n      var pageKey = target.getAttribute('pagekey');\n      pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null);\n      return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null);\n    },\n    onMenuSelect: function onMenuSelect(key, target) {\n      var pageKey = this.getPageKey(target);\n\n      switch (key) {\n        case '1':\n          this.closeLeft(pageKey);\n          break;\n\n        case '2':\n          this.closeRight(pageKey);\n          break;\n\n        case '3':\n          this.closeOthers(pageKey);\n          break;\n\n        case '4':\n          this.routeReload();\n          break;\n\n        default:\n          break;\n      }\n    },\n\n    /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    closeCurrent: function closeCurrent() {\n      this.remove(this.activePage);\n    },\n\n    /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    closeOthers: function closeOthers(pageKey) {\n      var index = this.linkList.indexOf(pageKey);\n\n      if (pageKey == indexKey || pageKey.indexOf('?ticke=') >= 0) {\n        this.linkList = this.linkList.slice(index, index + 1);\n        this.pageList = this.pageList.slice(index, index + 1);\n        this.activePage = this.linkList[0];\n      } else {\n        var indexContent = this.pageList.slice(0, 1)[0];\n        this.linkList = this.linkList.slice(index, index + 1);\n        this.pageList = this.pageList.slice(index, index + 1);\n        this.linkList.unshift(indexContent.fullPath);\n        this.pageList.unshift(indexContent);\n        this.activePage = this.linkList[1];\n      }\n    },\n    closeLeft: function closeLeft(pageKey) {\n      if (pageKey == indexKey) {\n        return;\n      }\n\n      var tempList = _toConsumableArray(this.pageList);\n\n      var indexContent = tempList.slice(0, 1)[0];\n      var index = this.linkList.indexOf(pageKey);\n      this.linkList = this.linkList.slice(index);\n      this.pageList = this.pageList.slice(index);\n      this.linkList.unshift(indexContent.fullPath);\n      this.pageList.unshift(indexContent);\n\n      if (this.linkList.indexOf(this.activePage) < 0) {\n        this.activePage = this.linkList[0];\n      }\n    },\n    closeRight: function closeRight(pageKey) {\n      var index = this.linkList.indexOf(pageKey);\n      this.linkList = this.linkList.slice(0, index + 1);\n      this.pageList = this.pageList.slice(0, index + 1);\n\n      if (this.linkList.indexOf(this.activePage < 0)) {\n        this.activePage = this.linkList[this.linkList.length - 1];\n      }\n    },\n    //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    dynamicRouterShow: function dynamicRouterShow(key, title) {\n      var keyIndex = this.linkList.indexOf(key);\n\n      if (keyIndex >= 0) {\n        var currRouter = this.pageList[keyIndex];\n        var meta = Object.assign({}, currRouter.meta, {\n          title: title\n        });\n        this.pageList.splice(keyIndex, 1, Object.assign({}, currRouter, {\n          meta: meta\n        }));\n\n        if (key === this.activePage) {\n          this.changeTitle(title);\n        }\n      }\n    },\n    //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    //update-begin-author:taoyan date:20191008 for:路由刷新\n    routeReload: function routeReload() {\n      var _this = this;\n\n      this.reloadFlag = false;\n      var ToggleMultipage = \"ToggleMultipage\";\n      this.$store.dispatch(ToggleMultipage, false);\n      this.$nextTick(function () {\n        _this.$store.dispatch(ToggleMultipage, true);\n\n        _this.reloadFlag = true;\n      });\n    } //update-end-author:taoyan date:20191008 for:路由刷新\n\n  }\n};",{"version":3,"sources":["TabLayout.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <global-layout @dynamicRouterShow=\"dynamicRouterShow\">\n    <!-- update-begin- author:sunjianlei --- date:20191009 --- for: 提升右键菜单的层级 -->\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" style=\"z-index: 9999;\" @select=\"onMenuSelect\"/>\n    <!-- update-end- author:sunjianlei --- date:20191009 --- for: 提升右键菜单的层级 -->\n    <a-tabs\n      @contextmenu.native=\"e => onContextmenu(e)\"\n      v-if=\"multipage\"\n      :active-key=\"activePage\"\n      class=\"tab-layout-tabs\"\n      style=\"height:52px\"\n      :hide-add=\"true\"\n      type=\"editable-card\"\n      @change=\"changePage\"\n      @tabClick=\"tabCallBack\"\n      @edit=\"editPage\">\n      <a-tab-pane :id=\"page.fullPath\" :key=\"page.fullPath\" v-for=\"page in pageList\">\n        <span slot=\"tab\" :pagekey=\"page.fullPath\">{{ page.meta.title }}</span>\n      </a-tab-pane>\n    </a-tabs>\n    <div style=\"margin: 12px 12px 0;\">\n      <transition name=\"page-toggle\">\n        <keep-alive v-if=\"multipage\">\n          <router-view v-if=\"reloadFlag\"/>\n        </keep-alive>\n        <template v-else>\n          <router-view v-if=\"reloadFlag\"/>\n        </template>\n      </transition>\n    </div>\n  </global-layout>\n</template>\n\n<script>\n  import GlobalLayout from '@/components/page/GlobalLayout'\n  import Contextmenu from '@/components/menu/Contextmenu'\n  import { mixin, mixinDevice } from '@/utils/mixin.js'\n  import { triggerWindowResizeEvent } from '@/utils/util'\n\n  const indexKey = '/dashboard/analysis'\n\n  export default {\n    name: 'TabLayout',\n    components: {\n      GlobalLayout,\n      Contextmenu\n    },\n    mixins: [mixin, mixinDevice],\n    data() {\n      return {\n        pageList: [],\n        linkList: [],\n        activePage: '',\n        menuVisible: false,\n        menuItemList: [\n          { key: '4', icon: 'reload', text: '刷 新' },\n          { key: '1', icon: 'arrow-left', text: '关闭左侧' },\n          { key: '2', icon: 'arrow-right', text: '关闭右侧' },\n          { key: '3', icon: 'close', text: '关闭其它' }\n        ],\n        reloadFlag:true\n      }\n    },\n    /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用 ->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    provide(){\n      return{\n        closeCurrent:this.closeCurrent\n      }\n    },\n    /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    computed: {\n      multipage() {\n        //判断如果是手机模式，自动切换为单页面模式\n        if (this.isMobile()) {\n          return false\n        } else {\n          return this.$store.state.app.multipage\n        }\n      }\n    },\n    created() {\n      if (this.$route.path != indexKey) {\n        this.addIndexToFirst()\n      }\n      // 复制一个route对象出来，不能影响原route\n      let currentRoute = Object.assign({}, this.$route)\n      currentRoute.meta = Object.assign({}, currentRoute.meta)\n      // update-begin-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\n      let storeKey = 'route:title:' + currentRoute.fullPath\n      let routeTitle = this.$ls.get(storeKey)\n      if (routeTitle) {\n        currentRoute.meta.title = routeTitle\n      }\n      // update-end-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\n      this.pageList.push(currentRoute)\n      this.linkList.push(currentRoute.fullPath)\n      this.activePage = currentRoute.fullPath\n    },\n    mounted() {\n    },\n    watch: {\n      '$route': function(newRoute) {\n        //console.log(\"新的路由\",newRoute)\n        this.activePage = newRoute.fullPath\n        if (!this.multipage) {\n          this.linkList = [newRoute.fullPath]\n          this.pageList = [Object.assign({},newRoute)]\n        // update-begin-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n        } else if(indexKey==newRoute.fullPath) {\n          //首页时 判断是否缓存 没有缓存 刷新之\n          if (newRoute.meta.keepAlive === false) {\n            this.routeReload()\n          }\n        // update-end-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n        }else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n          this.linkList.push(newRoute.fullPath)\n          this.pageList.push(Object.assign({},newRoute))\n          // update-begin-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍\n          if (newRoute.meta.keepAlive) {\n            this.routeReload()\n          }\n          // update-end-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍\n        } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n          let oldIndex = this.linkList.indexOf(newRoute.fullPath)\n          let oldPositionRoute = this.pageList[oldIndex]\n          this.pageList.splice(oldIndex, 1, Object.assign({},newRoute,{meta:oldPositionRoute.meta}))\n        }\n      },\n      'activePage': function(key) {\n        let index = this.linkList.lastIndexOf(key)\n        let waitRouter = this.pageList[index]\n        // 【TESTA-523】修复：不允许重复跳转路由异常\n        if (waitRouter.fullPath !== this.$route.fullPath) {\n          this.$router.push(Object.assign({}, waitRouter))\n          this.changeTitle(waitRouter.meta.title)\n        }\n      },\n      'multipage': function(newVal) {\n        if(this.reloadFlag){\n          if (!newVal) {\n            this.linkList = [this.$route.fullPath]\n            this.pageList = [this.$route]\n          }\n        }\n      },\n      // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n      device() {\n        if (this.multipage && this.linkList.indexOf(indexKey) === -1) {\n          this.addIndexToFirst()\n        }\n      },\n      // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    },\n    methods: {\n      // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n      // 将首页添加到第一位\n      addIndexToFirst() {\n        this.pageList.splice(0, 0, {\n          name: 'dashboard-analysis',\n          path: indexKey,\n          fullPath: indexKey,\n          meta: {\n            icon: 'dashboard',\n            title: '首页'\n          }\n        })\n        this.linkList.splice(0, 0, indexKey)\n      },\n      // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n\n      // update-begin-author:sunjianlei date:20200120 for: 动态更改页面标题\n      changeTitle(title) {\n        let projectTitle = \"智能管道探漏系统\"\n        // 首页特殊处理\n        if (this.$route.path === indexKey) {\n          document.title = projectTitle\n        } else {\n          document.title = title + ' · ' + projectTitle\n        }\n      },\n      // update-end-author:sunjianlei date:20200120 for: 动态更改页面标题\n\n      changePage(key) {\n        this.activePage = key\n      },\n      tabCallBack() {\n        this.$nextTick(() => {\n          triggerWindowResizeEvent()\n        })\n      },\n      editPage(key, action) {\n        this[action](key)\n      },\n      remove(key) {\n        if (key == indexKey) {\n          this.$message.warning('首页不能关闭!')\n          return\n        }\n        if (this.pageList.length === 1) {\n          this.$message.warning('这是最后一页，不能再关闭了啦')\n          return\n        }\n        console.log(\"this.pageList \",this.pageList );\n        this.pageList = this.pageList.filter(item => item.fullPath !== key)\n        let index = this.linkList.indexOf(key)\n        this.linkList = this.linkList.filter(item => item !== key)\n        index = index >= this.linkList.length ? this.linkList.length - 1 : index\n        this.activePage = this.linkList[index]\n      },\n      onContextmenu(e) {\n        const pagekey = this.getPageKey(e.target)\n        if (pagekey !== null) {\n          e.preventDefault()\n          this.menuVisible = true\n        }\n      },\n      getPageKey(target, depth) {\n        depth = depth || 0\n        if (depth > 2) {\n          return null\n        }\n        let pageKey = target.getAttribute('pagekey')\n        pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null)\n        return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null)\n      },\n      onMenuSelect(key, target) {\n        let pageKey = this.getPageKey(target)\n        switch (key) {\n          case '1':\n            this.closeLeft(pageKey)\n            break\n          case '2':\n            this.closeRight(pageKey)\n            break\n          case '3':\n            this.closeOthers(pageKey)\n            break\n          case '4':\n            this.routeReload()\n            break\n          default:\n            break\n        }\n      },\n      /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n      closeCurrent(){\n        this.remove(this.activePage);\n      },\n      /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n      closeOthers(pageKey) {\n        let index = this.linkList.indexOf(pageKey)\n        if (pageKey == indexKey || pageKey.indexOf('?ticke=')>=0) {\n          this.linkList = this.linkList.slice(index, index + 1)\n          this.pageList = this.pageList.slice(index, index + 1)\n          this.activePage = this.linkList[0]\n        } else {\n          let indexContent = this.pageList.slice(0, 1)[0]\n          this.linkList = this.linkList.slice(index, index + 1)\n          this.pageList = this.pageList.slice(index, index + 1)\n          this.linkList.unshift(indexContent.fullPath)\n          this.pageList.unshift(indexContent)\n          this.activePage = this.linkList[1]\n        }\n      },\n      closeLeft(pageKey) {\n        if (pageKey == indexKey) {\n          return\n        }\n        let tempList = [...this.pageList]\n        let indexContent = tempList.slice(0, 1)[0]\n        let index = this.linkList.indexOf(pageKey)\n        this.linkList = this.linkList.slice(index)\n        this.pageList = this.pageList.slice(index)\n        this.linkList.unshift(indexContent.fullPath)\n        this.pageList.unshift(indexContent)\n        if (this.linkList.indexOf(this.activePage) < 0) {\n          this.activePage = this.linkList[0]\n        }\n      },\n      closeRight(pageKey) {\n        let index = this.linkList.indexOf(pageKey)\n        this.linkList = this.linkList.slice(0, index + 1)\n        this.pageList = this.pageList.slice(0, index + 1)\n        if (this.linkList.indexOf(this.activePage < 0)) {\n          this.activePage = this.linkList[this.linkList.length - 1]\n        }\n      },\n      //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n      dynamicRouterShow(key,title){\n        let keyIndex = this.linkList.indexOf(key)\n        if(keyIndex>=0){\n          let currRouter = this.pageList[keyIndex]\n          let meta = Object.assign({},currRouter.meta,{title:title})\n          this.pageList.splice(keyIndex, 1, Object.assign({},currRouter,{meta:meta}))\n          if (key === this.activePage) {\n            this.changeTitle(title)\n          }\n        }\n      },\n      //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n\n      //update-begin-author:taoyan date:20191008 for:路由刷新\n      routeReload(){\n        this.reloadFlag = false\n        let ToggleMultipage = \"ToggleMultipage\"\n        this.$store.dispatch(ToggleMultipage,false)\n        this.$nextTick(()=>{\n          this.$store.dispatch(ToggleMultipage,true)\n          this.reloadFlag = true\n        })\n      }\n      //update-end-author:taoyan date:20191008 for:路由刷新\n    }\n  }\n</script>\n\n<style lang=\"less\">\n\n  /*\n * The following styles are auto-applied to elements with\n * transition=\"page-transition\" when their visibility is toggled\n * by Vue.js.\n *\n * You can easily play with the page transition by editing\n * these styles.\n */\n\n  .page-transition-enter {\n    opacity: 0;\n  }\n\n  .page-transition-leave-active {\n    opacity: 0;\n  }\n\n  .page-transition-enter .page-transition-container,\n  .page-transition-leave-active .page-transition-container {\n    -webkit-transform: scale(1.1);\n    transform: scale(1.1);\n  }\n\n  /*美化弹出Tab样式*/\n  .ant-tabs-nav-container {\n    margin-top: 4px;\n  }\n\n  /* 修改 ant-tabs 样式 */\n  .tab-layout-tabs.ant-tabs {\n    border-bottom: 1px solid #ccc;\n    border-left: 1px solid #ccc;\n    background-color: white;\n    padding: 0 20px;\n\n    .ant-tabs-bar {\n      margin: 4px 0 0;\n      border: none;\n    }\n\n  }\n\n  .tab-layout-tabs.ant-tabs {\n\n    &.ant-tabs-card .ant-tabs-tab {\n\n      padding: 0 24px !important;\n      background-color: white !important;\n      margin-right: 10px !important;\n\n      .ant-tabs-close-x {\n        width: 12px !important;\n        height: 12px !important;\n        opacity: 0 !important;\n        cursor: pointer !important;\n        font-size: 12px !important;\n        margin: 0 !important;\n        position: absolute;\n        top: 36%;\n        right: 6px;\n      }\n\n      &:hover .ant-tabs-close-x {\n        opacity: 1 !important;\n      }\n\n    }\n\n  }\n\n  .tab-layout-tabs.ant-tabs.ant-tabs-card > .ant-tabs-bar {\n    .ant-tabs-tab {\n      border: none !important;\n      border-bottom: 1px solid transparent !important;\n    }\n    .ant-tabs-tab-active {\n      border-color: @primary-color!important;\n    }\n  }\n\n\n</style>"],"sourceRoot":"src/components/layouts"}]}