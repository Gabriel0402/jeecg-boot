{"remainingRequest":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/jeecg/modal/JPopupOnlReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/src/components/jeecg/modal/JPopupOnlReport.vue","mtime":1596297340381},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nimport { filterObj } from '@/utils/util';\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil';\nimport { httpGroupRequest } from '@/api/GroupRequest.js';\nvar MODAL_WIDTH = 1200;\nexport default {\n  name: 'JPopupOnlReport',\n  props: ['multi', 'code', 'groupId'],\n  components: {},\n  data: function data() {\n    return {\n      visible: false,\n      title: \"\",\n      confirmLoading: false,\n      queryInfo: [],\n      toggleSearchStatus: false,\n      queryParam: {},\n      dictOptions: {},\n      url: {\n        getColumns: '/online/cgreport/api/getRpColumns/',\n        getData: '/online/cgreport/api/getData/',\n        getQueryInfo: '/online/cgreport/api/getQueryInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: function showTotal(total, range) {\n            return range[0] + '-' + range[1] + ' 共' + total + '条';\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgRpConfigId: \"\",\n      modalWidth: MODAL_WIDTH,\n      tableScroll: {\n        x: MODAL_WIDTH - 100\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.loadColumnsInfo();\n  },\n  watch: {\n    code: function code() {\n      this.loadColumnsInfo();\n    }\n  },\n  computed: {\n    showSearchFlag: function showSearchFlag() {\n      return this.queryInfo && this.queryInfo.length > 0;\n    }\n  },\n  methods: {\n    loadColumnsInfo: function loadColumnsInfo() {\n      var _this = this;\n\n      var url = \"\".concat(this.url.getColumns).concat(this.code); //缓存key\n\n      var groupIdKey;\n\n      if (this.groupId) {\n        groupIdKey = this.groupId + url;\n      }\n\n      httpGroupRequest(function () {\n        return getAction(url);\n      }, groupIdKey).then(function (res) {\n        if (res.success) {\n          _this.initDictOptionData(res.result.dictOptions);\n\n          _this.cgRpConfigId = res.result.cgRpConfigId;\n          _this.title = res.result.cgRpConfigName;\n          var currColumns = res.result.columns;\n\n          for (var a = 0; a < currColumns.length; a++) {\n            if (currColumns[a].customRender) {\n              (function () {\n                var dictCode = currColumns[a].customRender;\n\n                currColumns[a].customRender = function (text) {\n                  return filterMultiDictText(_this.dictOptions[dictCode], text + \"\");\n                };\n              })();\n            }\n          }\n\n          _this.table.columns = _toConsumableArray(currColumns);\n\n          _this.initQueryInfo();\n\n          _this.loadData(1);\n        }\n      });\n    },\n    initQueryInfo: function initQueryInfo() {\n      var _this2 = this;\n\n      var url = \"\".concat(this.url.getQueryInfo).concat(this.cgRpConfigId); //缓存key\n\n      var groupIdKey;\n\n      if (this.groupId) {\n        groupIdKey = this.groupId + url;\n      }\n\n      httpGroupRequest(function () {\n        return getAction(url);\n      }, groupIdKey).then(function (res) {\n        // console.log(\"获取查询条件\", res);\n        if (res.success) {\n          _this2.queryInfo = res.result;\n        } else {\n          _this2.$message.warning(res.message);\n        }\n      });\n    },\n    loadData: function loadData(arg) {\n      var _this3 = this;\n\n      if (arg == 1) {\n        this.table.pagination.current = 1;\n      }\n\n      var params = this.getQueryParams(); //查询条件\n\n      this.table.loading = true;\n      var url = \"\".concat(this.url.getData).concat(this.cgRpConfigId); //缓存key\n\n      var groupIdKey;\n\n      if (this.groupId) {\n        groupIdKey = this.groupId + url + JSON.stringify(params);\n      }\n\n      httpGroupRequest(function () {\n        return getAction(url, params);\n      }, groupIdKey).then(function (res) {\n        _this3.table.loading = false; // console.log(\"daa\",res)\n\n        var data = res.result;\n\n        if (data) {\n          _this3.table.pagination.total = Number(data.total);\n          _this3.table.dataSource = data.records;\n        } else {\n          _this3.table.pagination.total = 0;\n          _this3.table.dataSource = [];\n        }\n      });\n    },\n    getQueryParams: function getQueryParams() {\n      var param = Object.assign({}, this.queryParam, this.sorter);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    handleChangeInTableSelect: function handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      this.table.selectedRowKeys = selectedRowKeys;\n      this.table.selectionRows = selectionRows;\n    },\n    handleChangeInTable: function handleChangeInTable(pagination, filters, sorter) {\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.sorter.column = sorter.field;\n        this.sorter.order = 'ascend' == sorter.order ? 'asc' : 'desc';\n      }\n\n      this.table.pagination = pagination;\n      this.loadData();\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    handleSubmit: function handleSubmit() {\n      if (!this.multi) {\n        if (this.table.selectionRows && this.table.selectionRows.length > 1) {\n          this.$message.warning(\"请选择一条记录\");\n          return false;\n        }\n      }\n\n      if (!this.table.selectionRows || this.table.selectionRows.length == 0) {\n        this.$message.warning(\"请选择一条记录\");\n        return false;\n      }\n\n      this.$emit('ok', this.table.selectionRows);\n      this.close();\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n      this.onClearSelected();\n    },\n    show: function show() {\n      this.visible = true;\n    },\n    handleToggleSearch: function handleToggleSearch() {\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    searchByquery: function searchByquery() {\n      this.loadData(1);\n    },\n    onlyReload: function onlyReload() {\n      this.loadData();\n    },\n    searchReset: function searchReset() {\n      var _this4 = this;\n\n      Object.keys(this.queryParam).forEach(function (key) {\n        _this4.queryParam[key] = \"\";\n      });\n      this.loadData(1);\n    },\n    onClearSelected: function onClearSelected() {\n      this.table.selectedRowKeys = [];\n      this.table.selectionRows = [];\n    },\n    combineRowKey: function combineRowKey(record) {\n      var res = '';\n      Object.keys(record).forEach(function (key) {\n        res += record[key];\n      });\n\n      if (res.length > 50) {\n        res = res.substring(0, 50);\n      }\n\n      return res;\n    },\n    clickThenCheck: function clickThenCheck(record) {\n      var _this5 = this;\n\n      return {\n        on: {\n          click: function click() {\n            var rowKey = _this5.combineRowKey(record);\n\n            if (!_this5.table.selectedRowKeys || _this5.table.selectedRowKeys.length == 0) {\n              var arr1 = [],\n                  arr2 = [];\n              arr1.push(record);\n              arr2.push(rowKey);\n              _this5.table.selectedRowKeys = arr2;\n              _this5.table.selectionRows = arr1;\n            } else {\n              if (_this5.table.selectedRowKeys.indexOf(rowKey) < 0) {\n                _this5.table.selectedRowKeys.push(rowKey);\n\n                _this5.table.selectionRows.push(record);\n              } else {\n                var rowKey_index = _this5.table.selectedRowKeys.indexOf(rowKey);\n\n                _this5.table.selectedRowKeys.splice(rowKey_index, 1);\n\n                _this5.table.selectionRows.splice(rowKey_index, 1);\n              }\n            }\n          }\n        }\n      };\n    },\n    //防止字典中有垃圾数据\n    initDictOptionData: function initDictOptionData(dictOptions) {\n      var obj = {};\n      Object.keys(dictOptions).map(function (k) {\n        obj[k] = dictOptions[k].filter(function (item) {\n          return item != null;\n        });\n      });\n      this.dictOptions = obj;\n    }\n  }\n};",null]}