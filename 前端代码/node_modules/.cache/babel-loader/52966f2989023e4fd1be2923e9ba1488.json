{"remainingRequest":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenyang/Documents/jeecg-boot/前端代码/src/views/user/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/src/views/user/Login.vue","mtime":1596300572645},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyang/Documents/jeecg-boot/前端代码/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//import md5 from \"md5\"\nimport api from '@/api';\nimport TwoStepCaptcha from '@/components/tools/TwoStepCaptcha';\nimport { mapActions } from \"vuex\";\nimport { timeFix } from \"@/utils/util\";\nimport Vue from 'vue';\nimport { ACCESS_TOKEN, ENCRYPTED_STRING } from \"@/store/mutation-types\";\nimport { putAction, postAction, getAction } from '@/api/manage';\nimport { encryption, getEncryptedString } from '@/utils/encryption/aesEncrypt';\nimport store from '@/store/';\nimport { USER_INFO } from \"@/store/mutation-types\";\nimport LoginSelectModal from './LoginSelectModal.vue';\nexport default {\n  components: {\n    TwoStepCaptcha: TwoStepCaptcha,\n    LoginSelectModal: LoginSelectModal\n  },\n  data: function data() {\n    return {\n      customActiveKey: \"tab1\",\n      loginBtn: false,\n      // login type: 0 email, 1 username, 2 telephone\n      loginType: 0,\n      requiredTwoStepCaptcha: false,\n      stepCaptchaVisible: false,\n      form: this.$form.createForm(this),\n      encryptedString: {\n        key: \"\",\n        iv: \"\"\n      },\n      state: {\n        time: 60,\n        smsSendBtn: false\n      },\n      validatorRules: {\n        username: {\n          rules: [{\n            required: true,\n            message: '请输入用户名!'\n          }, {\n            validator: this.handleUsernameOrEmail\n          }]\n        },\n        password: {\n          rules: [{\n            required: true,\n            message: '请输入密码!',\n            validator: 'click'\n          }]\n        },\n        mobile: {\n          rules: [{\n            validator: this.validateMobile\n          }]\n        },\n        captcha: {\n          rule: [{\n            required: true,\n            message: '请输入验证码!'\n          }]\n        },\n        inputCode: {\n          rules: [{\n            required: true,\n            message: '请输入验证码!'\n          }]\n        }\n      },\n      verifiedCode: \"\",\n      inputCodeContent: \"\",\n      inputCodeNull: true,\n      currentUsername: \"\",\n      currdatetime: '',\n      randCodeImage: '',\n      requestCodeSuccess: false\n    };\n  },\n  created: function created() {\n    this.currdatetime = new Date().getTime();\n    Vue.ls.remove(ACCESS_TOKEN);\n    this.getRouterData();\n    this.handleChangeCheckCode(); // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n    //this.getEncrypte();\n    // update-end- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions([\"Login\", \"Logout\", \"PhoneLogin\", \"ThirdLogin\"])), {}, {\n    //第三方登录\n    onThirdLogin: function onThirdLogin(source) {\n      var url = window._CONFIG['domianURL'] + \"/thirdLogin/render/\".concat(source);\n      window.open(url, \"login \".concat(source), 'height=500, width=500, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=n o, status=no');\n      var that = this;\n\n      var receiveMessage = function receiveMessage(event) {\n        var origin = event.origin;\n        console.log(\"origin\", origin);\n        var token = event.data;\n        console.log(\"event.data\", token);\n        that.ThirdLogin(token).then(function (res) {\n          if (res.success) {\n            that.loginSuccess();\n          } else {\n            that.requestFailed(res);\n          }\n        });\n      };\n\n      window.addEventListener(\"message\", receiveMessage, false);\n    },\n    // handler\n    handleUsernameOrEmail: function handleUsernameOrEmail(rule, value, callback) {\n      var regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n\n      if (regex.test(value)) {\n        this.loginType = 0;\n      } else {\n        this.loginType = 1;\n      }\n\n      callback();\n    },\n    handleTabClick: function handleTabClick(key) {\n      this.customActiveKey = key; // this.form.resetFields()\n    },\n    handleSubmit: function handleSubmit() {\n      var _this = this;\n\n      var that = this;\n      var loginParams = {};\n      that.loginBtn = true; // 使用账户密码登陆\n\n      if (that.customActiveKey === 'tab1') {\n        that.form.validateFields(['username', 'password', 'inputCode', 'rememberMe'], {\n          force: true\n        }, function (err, values) {\n          if (!err) {\n            loginParams.username = values.username; // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n            //loginParams.password = md5(values.password)\n            //loginParams.password = encryption(values.password,that.encryptedString.key,that.encryptedString.iv)\n\n            loginParams.password = values.password;\n            loginParams.remember_me = values.rememberMe; // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n\n            loginParams.captcha = that.inputCodeContent;\n            loginParams.checkKey = that.currdatetime;\n            console.log(\"登录参数\", loginParams);\n            that.Login(loginParams).then(function (res) {\n              _this.$refs.loginSelect.show(res.result);\n            }).catch(function (err) {\n              that.requestFailed(err);\n            });\n          } else {\n            that.loginBtn = false;\n          }\n        }); // 使用手机号登陆\n      } else {\n        that.form.validateFields(['mobile', 'captcha', 'rememberMe'], {\n          force: true\n        }, function (err, values) {\n          if (!err) {\n            loginParams.mobile = values.mobile;\n            loginParams.captcha = values.captcha;\n            loginParams.remember_me = values.rememberMe;\n            that.PhoneLogin(loginParams).then(function (res) {\n              console.log(res.result);\n\n              _this.$refs.loginSelect.show(res.result);\n            }).catch(function (err) {\n              that.requestFailed(err);\n            });\n          }\n        });\n      }\n    },\n    getCaptcha: function getCaptcha(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var that = this;\n      this.form.validateFields(['mobile'], {\n        force: true\n      }, function (err, values) {\n        if (!values.mobile) {\n          that.cmsFailed(\"请输入手机号\");\n        } else if (!err) {\n          _this2.state.smsSendBtn = true;\n          var interval = window.setInterval(function () {\n            if (that.state.time-- <= 0) {\n              that.state.time = 60;\n              that.state.smsSendBtn = false;\n              window.clearInterval(interval);\n            }\n          }, 1000);\n\n          var hide = _this2.$message.loading('验证码发送中..', 0);\n\n          var smsParams = {};\n          smsParams.mobile = values.mobile;\n          smsParams.smsmode = \"0\";\n          postAction(\"/sys/sms\", smsParams).then(function (res) {\n            if (!res.success) {\n              setTimeout(hide, 0);\n\n              _this2.cmsFailed(res.message);\n            }\n\n            console.log(res);\n            setTimeout(hide, 500);\n          }).catch(function (err) {\n            setTimeout(hide, 1);\n            clearInterval(interval);\n            that.state.time = 60;\n            that.state.smsSendBtn = false;\n\n            _this2.requestFailed(err);\n          });\n        }\n      });\n    },\n    stepCaptchaSuccess: function stepCaptchaSuccess() {\n      this.loginSuccess();\n    },\n    stepCaptchaCancel: function stepCaptchaCancel() {\n      var _this3 = this;\n\n      this.Logout().then(function () {\n        _this3.loginBtn = false;\n        _this3.stepCaptchaVisible = false;\n      });\n    },\n    handleChangeCheckCode: function handleChangeCheckCode() {\n      var _this4 = this;\n\n      this.currdatetime = new Date().getTime();\n      getAction(\"/sys/randomImage/\".concat(this.currdatetime)).then(function (res) {\n        if (res.success) {\n          _this4.randCodeImage = res.result;\n          _this4.requestCodeSuccess = true;\n        } else {\n          _this4.$message.error(res.message);\n\n          _this4.requestCodeSuccess = false;\n        }\n      }).catch(function () {\n        _this4.requestCodeSuccess = false;\n      });\n    },\n    loginSuccess: function loginSuccess() {\n      // update-begin- author:sunjianlei --- date:20190812 --- for: 登录成功后不解除禁用按钮，防止多次点击\n      // this.loginBtn = false\n      // update-end- author:sunjianlei --- date:20190812 --- for: 登录成功后不解除禁用按钮，防止多次点击\n      this.$router.push({\n        path: \"/dashboard/analysis\"\n      }).catch(function () {\n        console.log('登录跳转首页出错,这个错误从哪里来的');\n      });\n      this.$notification.success({\n        message: '欢迎',\n        description: \"\".concat(timeFix(), \"\\uFF0C\\u6B22\\u8FCE\\u56DE\\u6765\")\n      });\n    },\n    cmsFailed: function cmsFailed(err) {\n      this.$notification['error']({\n        message: \"登录失败\",\n        description: err,\n        duration: 4\n      });\n    },\n    requestFailed: function requestFailed(err) {\n      this.$notification['error']({\n        message: '登录失败',\n        description: ((err.response || {}).data || {}).message || err.message || \"请求出现错误，请稍后再试\",\n        duration: 4\n      });\n      this.loginBtn = false;\n    },\n    validateMobile: function validateMobile(rule, value, callback) {\n      if (!value || new RegExp(/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$/).test(value)) {\n        callback();\n      } else {\n        callback(\"您的手机号码格式不正确!\");\n      }\n    },\n    validateInputCode: function validateInputCode(rule, value, callback) {\n      if (!value || this.verifiedCode == this.inputCodeContent) {\n        callback();\n      } else {\n        callback(\"您输入的验证码不正确!\");\n      }\n    },\n    generateCode: function generateCode(value) {\n      this.verifiedCode = value.toLowerCase();\n    },\n    inputCodeChange: function inputCodeChange(e) {\n      this.inputCodeContent = e.target.value;\n    },\n    loginSelectOk: function loginSelectOk() {\n      this.loginSuccess();\n    },\n    getRouterData: function getRouterData() {\n      var _this5 = this;\n\n      this.$nextTick(function () {\n        if (_this5.$route.params.username) {\n          _this5.form.setFieldsValue({\n            'username': _this5.$route.params.username\n          });\n        }\n      });\n    },\n    //获取密码加密规则\n    getEncrypte: function getEncrypte() {\n      var _this6 = this;\n\n      var encryptedString = Vue.ls.get(ENCRYPTED_STRING);\n\n      if (encryptedString == null) {\n        getEncryptedString().then(function (data) {\n          _this6.encryptedString = data;\n        });\n      } else {\n        this.encryptedString = encryptedString;\n      }\n    }\n  })\n};",{"version":3,"sources":["Login.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"main\">\n    <a-form :form=\"form\" class=\"user-layout-login\" ref=\"formLogin\" id=\"formLogin\">\n      <a-tabs\n        :activeKey=\"customActiveKey\"\n        :tabBarStyle=\"{ textAlign: 'center', borderBottom: 'unset' }\"\n        @change=\"handleTabClick\">\n        <a-tab-pane key=\"tab1\" tab=\"账号密码登陆\">\n          <a-form-item>\n            <a-input\n              size=\"large\"\n              v-decorator=\"['username',validatorRules.username,{ validator: this.handleUsernameOrEmail }]\"\n              type=\"text\"\n              placeholder=\"请输入帐户名\">\n              <a-icon slot=\"prefix\" type=\"user\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n            </a-input>\n          </a-form-item>\n\n          <a-form-item>\n            <a-input\n              v-decorator=\"['password',validatorRules.password]\"\n              size=\"large\"\n              type=\"password\"\n              autocomplete=\"false\"\n              placeholder=\"密码\">\n              <a-icon slot=\"prefix\" type=\"lock\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n            </a-input>\n          </a-form-item>\n\n          <a-row :gutter=\"0\">\n            <a-col :span=\"16\">\n              <a-form-item>\n                <a-input\n                  v-decorator=\"['inputCode',validatorRules.inputCode]\"\n                  size=\"large\"\n                  type=\"text\"\n                  @change=\"inputCodeChange\"\n                  placeholder=\"请输入验证码\">\n                  <a-icon slot=\"prefix\" type=\"smile\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n                </a-input>\n              </a-form-item>\n            </a-col>\n            <a-col :span=\"8\" style=\"text-align: right\">\n              <img v-if=\"requestCodeSuccess\" style=\"margin-top: 2px;\" :src=\"randCodeImage\" @click=\"handleChangeCheckCode\"/>\n              <img v-else style=\"margin-top: 2px;\" src=\"../../assets/checkcode.png\" @click=\"handleChangeCheckCode\"/>\n            </a-col>\n          </a-row>\n\n\n        </a-tab-pane>\n        <!-- <a-tab-pane key=\"tab2\" tab=\"手机号登陆\">\n          <a-form-item>\n            <a-input\n              v-decorator=\"['mobile',validatorRules.mobile]\"\n              size=\"large\"\n              type=\"text\"\n              placeholder=\"手机号\">\n              <a-icon slot=\"prefix\" type=\"mobile\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n            </a-input>\n          </a-form-item>\n\n          <a-row :gutter=\"16\">\n            <a-col class=\"gutter-row\" :span=\"16\">\n              <a-form-item>\n                <a-input\n                  v-decorator=\"['captcha',validatorRules.captcha]\"\n                  size=\"large\"\n                  type=\"text\"\n                  placeholder=\"请输入验证码\">\n                  <a-icon slot=\"prefix\" type=\"mail\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n                </a-input>\n              </a-form-item>\n            </a-col>\n            <a-col class=\"gutter-row\" :span=\"8\">\n              <a-button\n                class=\"getCaptcha\"\n                tabindex=\"-1\"\n                :disabled=\"state.smsSendBtn\"\n                @click.stop.prevent=\"getCaptcha\"\n                v-text=\"!state.smsSendBtn && '获取验证码' || (state.time+' s')\"></a-button>\n            </a-col>\n          </a-row>\n        </a-tab-pane> -->\n      </a-tabs>\n\n      <a-form-item>\n        <a-checkbox v-decorator=\"['rememberMe', {initialValue: true, valuePropName: 'checked'}]\" >自动登陆</a-checkbox>\n        <router-link :to=\"{ name: 'alteration'}\" class=\"forge-password\" style=\"float: right;\">\n          忘记密码\n        </router-link>\n       <router-link :to=\"{ name: 'register'}\" class=\"forge-password\" style=\"float: right;margin-right: 10px\" >\n          注册账户\n        </router-link>\n      </a-form-item>\n\n      <a-form-item style=\"margin-top:24px\">\n        <a-button\n          size=\"large\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          class=\"login-button\"\n          :loading=\"loginBtn\"\n          @click.stop.prevent=\"handleSubmit\"\n          :disabled=\"loginBtn\">确定\n        </a-button>\n      </a-form-item>\n\n      <!-- <div class=\"user-login-other\">\n        <span>其他登陆方式</span>\n        <a @click=\"onThirdLogin('github')\" title=\"github\"><a-icon class=\"item-icon\" type=\"github\"></a-icon></a>\n        <a @click=\"onThirdLogin('wechat_enterprise')\" title=\"企业微信\"><a-icon class=\"item-icon\" type=\"wechat\"></a-icon></a>\n        <a @click=\"onThirdLogin('dingtalk')\" title=\"钉钉\"><a-icon class=\"item-icon\" type=\"dingding\"></a-icon></a>\n      </div> -->\n    </a-form>\n\n    <two-step-captcha\n      v-if=\"requiredTwoStepCaptcha\"\n      :visible=\"stepCaptchaVisible\"\n      @success=\"stepCaptchaSuccess\"\n      @cancel=\"stepCaptchaCancel\"></two-step-captcha>\n    <login-select-modal ref=\"loginSelect\" @success=\"loginSelectOk\"></login-select-modal>\n  </div>\n</template>\n\n<script>\n  //import md5 from \"md5\"\n  import api from '@/api'\n  import TwoStepCaptcha from '@/components/tools/TwoStepCaptcha'\n  import { mapActions } from \"vuex\"\n  import { timeFix } from \"@/utils/util\"\n  import Vue from 'vue'\n  import { ACCESS_TOKEN ,ENCRYPTED_STRING} from \"@/store/mutation-types\"\n  import { putAction,postAction,getAction } from '@/api/manage'\n  import { encryption , getEncryptedString } from '@/utils/encryption/aesEncrypt'\n  import store from '@/store/'\n  import { USER_INFO } from \"@/store/mutation-types\"\n  import LoginSelectModal from './LoginSelectModal.vue'\n\n  export default {\n    components: {\n      TwoStepCaptcha,\n      LoginSelectModal\n    },\n    data () {\n      return {\n        customActiveKey: \"tab1\",\n        loginBtn: false,\n        // login type: 0 email, 1 username, 2 telephone\n        loginType: 0,\n        requiredTwoStepCaptcha: false,\n        stepCaptchaVisible: false,\n        form: this.$form.createForm(this),\n        encryptedString:{\n          key:\"\",\n          iv:\"\",\n        },\n        state: {\n          time: 60,\n          smsSendBtn: false,\n        },\n        validatorRules:{\n          username:{rules: [{ required: true, message: '请输入用户名!'},{validator: this.handleUsernameOrEmail}]},\n          password:{rules: [{ required: true, message: '请输入密码!',validator: 'click'}]},\n          mobile:{rules: [{validator:this.validateMobile}]},\n          captcha:{rule: [{ required: true, message: '请输入验证码!'}]},\n          inputCode:{rules: [{ required: true, message: '请输入验证码!'}]}\n        },\n        verifiedCode:\"\",\n        inputCodeContent:\"\",\n        inputCodeNull:true,\n        currentUsername:\"\",\n        currdatetime:'',\n        randCodeImage:'',\n        requestCodeSuccess:false\n      }\n    },\n    created () {\n      this.currdatetime = new Date().getTime();\n      Vue.ls.remove(ACCESS_TOKEN)\n      this.getRouterData();\n      this.handleChangeCheckCode();\n      // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n      //this.getEncrypte();\n      // update-end- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n    },\n    methods: {\n      ...mapActions([ \"Login\", \"Logout\",\"PhoneLogin\",\"ThirdLogin\" ]),\n      //第三方登录\n      onThirdLogin(source){\n        let url = window._CONFIG['domianURL']+`/thirdLogin/render/${source}`\n        window.open(url, `login ${source}`, 'height=500, width=500, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=n o, status=no')\n        let that = this;\n        let receiveMessage = function(event){\n          var origin = event.origin\n          console.log(\"origin\",origin);\n\n          let token = event.data\n          console.log(\"event.data\",token)\n          that.ThirdLogin(token).then(res=>{\n            if(res.success){\n              that.loginSuccess()\n            }else{\n              that.requestFailed(res);\n            }\n          })\n        }\n        window.addEventListener(\"message\", receiveMessage, false);\n      },\n      // handler\n      handleUsernameOrEmail (rule, value, callback) {\n        const regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n        if (regex.test(value)) {\n          this.loginType = 0\n        } else {\n          this.loginType = 1\n        }\n        callback()\n      },\n      handleTabClick (key) {\n        this.customActiveKey = key\n        // this.form.resetFields()\n      },\n      handleSubmit () {\n        let that = this\n        let loginParams = {};\n        that.loginBtn = true;\n        // 使用账户密码登陆\n        if (that.customActiveKey === 'tab1') {\n          that.form.validateFields([ 'username', 'password','inputCode', 'rememberMe' ], { force: true }, (err, values) => {\n            if (!err) {\n              loginParams.username = values.username\n              // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n              //loginParams.password = md5(values.password)\n              //loginParams.password = encryption(values.password,that.encryptedString.key,that.encryptedString.iv)\n              loginParams.password = values.password\n              loginParams.remember_me = values.rememberMe\n              // update-begin- --- author:scott ------ date:20190805 ---- for:密码加密逻辑暂时注释掉，有点问题\n              loginParams.captcha = that.inputCodeContent\n              loginParams.checkKey = that.currdatetime\n              console.log(\"登录参数\",loginParams)\n              that.Login(loginParams).then((res) => {\n                this.$refs.loginSelect.show(res.result)\n              }).catch((err) => {\n                that.requestFailed(err);\n              });\n\n\n            }else {\n              that.loginBtn = false;\n            }\n          })\n          // 使用手机号登陆\n        } else {\n          that.form.validateFields([ 'mobile', 'captcha', 'rememberMe' ], { force: true }, (err, values) => {\n            if (!err) {\n              loginParams.mobile = values.mobile\n              loginParams.captcha = values.captcha\n              loginParams.remember_me = values.rememberMe\n              that.PhoneLogin(loginParams).then((res) => {\n                console.log(res.result);\n                this.$refs.loginSelect.show(res.result)\n              }).catch((err) => {\n                that.requestFailed(err);\n              })\n\n            }\n          })\n        }\n      },\n      getCaptcha (e) {\n        e.preventDefault();\n        let that = this;\n        this.form.validateFields([ 'mobile' ], { force: true },(err,values) => {\n            if(!values.mobile){\n              that.cmsFailed(\"请输入手机号\");\n            }else if (!err) {\n              this.state.smsSendBtn = true;\n              let interval = window.setInterval(() => {\n                if (that.state.time-- <= 0) {\n                  that.state.time = 60;\n                  that.state.smsSendBtn = false;\n                  window.clearInterval(interval);\n                }\n              }, 1000);\n\n              const hide = this.$message.loading('验证码发送中..', 0);\n              let smsParams = {};\n                  smsParams.mobile=values.mobile;\n                  smsParams.smsmode=\"0\";\n              postAction(\"/sys/sms\",smsParams)\n                .then(res => {\n                  if(!res.success){\n                    setTimeout(hide, 0);\n                    this.cmsFailed(res.message);\n                  }\n                  console.log(res);\n                  setTimeout(hide, 500);\n                })\n                .catch(err => {\n                  setTimeout(hide, 1);\n                  clearInterval(interval);\n                  that.state.time = 60;\n                  that.state.smsSendBtn = false;\n                  this.requestFailed(err);\n                });\n            }\n          }\n        );\n      },\n      stepCaptchaSuccess () {\n        this.loginSuccess()\n      },\n      stepCaptchaCancel () {\n        this.Logout().then(() => {\n          this.loginBtn = false\n          this.stepCaptchaVisible = false\n        })\n      },\n      handleChangeCheckCode(){\n        this.currdatetime = new Date().getTime();\n        getAction(`/sys/randomImage/${this.currdatetime}`).then(res=>{\n          if(res.success){\n            this.randCodeImage = res.result\n            this.requestCodeSuccess=true\n          }else{\n            this.$message.error(res.message)\n            this.requestCodeSuccess=false\n          }\n        }).catch(()=>{\n          this.requestCodeSuccess=false\n        })\n      },\n      loginSuccess () {\n        // update-begin- author:sunjianlei --- date:20190812 --- for: 登录成功后不解除禁用按钮，防止多次点击\n        // this.loginBtn = false\n        // update-end- author:sunjianlei --- date:20190812 --- for: 登录成功后不解除禁用按钮，防止多次点击\n        this.$router.push({ path: \"/dashboard/analysis\" }).catch(()=>{\n          console.log('登录跳转首页出错,这个错误从哪里来的')\n        })\n        this.$notification.success({\n          message: '欢迎',\n          description: `${timeFix()}，欢迎回来`,\n        });\n      },\n      cmsFailed(err){\n        this.$notification[ 'error' ]({\n          message: \"登录失败\",\n          description:err,\n          duration: 4,\n        });\n      },\n      requestFailed (err) {\n        this.$notification[ 'error' ]({\n          message: '登录失败',\n          description: ((err.response || {}).data || {}).message || err.message || \"请求出现错误，请稍后再试\",\n          duration: 4,\n        });\n        this.loginBtn = false;\n      },\n      validateMobile(rule,value,callback){\n        if (!value || new RegExp(/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$/).test(value)){\n          callback();\n        }else{\n          callback(\"您的手机号码格式不正确!\");\n        }\n\n      },\n      validateInputCode(rule,value,callback){\n        if(!value || this.verifiedCode==this.inputCodeContent){\n          callback();\n        }else{\n          callback(\"您输入的验证码不正确!\");\n        }\n      },\n      generateCode(value){\n        this.verifiedCode = value.toLowerCase()\n      },\n      inputCodeChange(e){\n        this.inputCodeContent = e.target.value\n      },\n      loginSelectOk(){\n        this.loginSuccess()\n      },\n    getRouterData(){\n      this.$nextTick(() => {\n        if (this.$route.params.username) {\n          this.form.setFieldsValue({\n            'username': this.$route.params.username\n          });\n        }\n      })\n    },\n    //获取密码加密规则\n    getEncrypte(){\n      var encryptedString = Vue.ls.get(ENCRYPTED_STRING);\n      if(encryptedString == null){\n        getEncryptedString().then((data) => {\n          this.encryptedString = data\n        });\n      }else{\n        this.encryptedString = encryptedString;\n      }\n    },\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped>\n\n  .user-layout-login {\n    label {\n      font-size: 14px;\n    }\n\n    .getCaptcha {\n      display: block;\n      width: 100%;\n      height: 40px;\n    }\n\n    .forge-password {\n      font-size: 14px;\n    }\n\n    button.login-button {\n      padding: 0 15px;\n      font-size: 16px;\n      height: 40px;\n      width: 100%;\n    }\n\n    .user-login-other {\n      text-align: left;\n      margin-top: 24px;\n      line-height: 22px;\n\n      .item-icon {\n        font-size: 24px;\n        color: rgba(0,0,0,.2);\n        margin-left: 16px;\n        vertical-align: middle;\n        cursor: pointer;\n        transition: color .3s;\n\n        &:hover {\n          color: #1890ff;\n        }\n      }\n\n      .register {\n        float: right;\n      }\n    }\n  }\n\n</style>\n<style>\n  .valid-error .ant-select-selection__placeholder{\n    color: #f5222d;\n  }\n</style>"],"sourceRoot":"src/views/user"}]}